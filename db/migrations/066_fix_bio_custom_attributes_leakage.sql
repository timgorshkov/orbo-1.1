-- Migration 066: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ bio –∏ custom_attributes –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
-- 
-- –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –≤ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–ª–∞
-- bio –∏ custom_attributes –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥—Ä—É–≥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
-- 
-- –†–µ—à–µ–Ω–∏–µ: 
-- 1. –û—á–∏—â–∞–µ–º bio –∏ custom_attributes –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã 
--    –≤ –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ–∑–∂–µ (–ø–æ created_at)
-- 2. –û—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏ participant –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tg_user_id
-- 3. –ù–ï —Ç—Ä–æ–≥–∞–µ–º –∑–∞–ø–∏—Å–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–≥ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
--    (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bio/custom_attributes –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö org)

DO $$
DECLARE
  v_cleaned_count INT := 0;
  v_participant RECORD;
  v_oldest_record RECORD;
BEGIN
  RAISE NOTICE 'üîç Starting bio/custom_attributes leakage cleanup...';

  -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ tg_user_id, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
  FOR v_participant IN
    SELECT 
      tg_user_id,
      COUNT(DISTINCT org_id) as org_count
    FROM participants
    WHERE tg_user_id IS NOT NULL
      AND (
        (bio IS NOT NULL AND bio != '')
        OR (custom_attributes IS NOT NULL AND custom_attributes != '{}'::jsonb)
      )
    GROUP BY tg_user_id
    HAVING COUNT(DISTINCT org_id) > 1
  LOOP
    RAISE NOTICE '  Processing tg_user_id % (in % orgs)', v_participant.tg_user_id, v_participant.org_count;

    -- –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ tg_user_id
    SELECT id, org_id, bio, custom_attributes, created_at
    INTO v_oldest_record
    FROM participants
    WHERE tg_user_id = v_participant.tg_user_id
    ORDER BY created_at ASC
    LIMIT 1;

    RAISE NOTICE '    Oldest record: org_id=%, created_at=%', v_oldest_record.org_id, v_oldest_record.created_at;

    -- –û—á–∏—â–∞–µ–º bio –∏ custom_attributes –≤ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—è—Ö,
    -- —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ò–î–ï–ù–¢–ò–ß–ù–´ (—Ç.–µ. –±—ã–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã)
    UPDATE participants
    SET 
      bio = NULL,
      custom_attributes = '{}'::jsonb
    WHERE tg_user_id = v_participant.tg_user_id
      AND id != v_oldest_record.id
      AND (
        -- –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã (–±—ã–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã)
        (bio IS NOT DISTINCT FROM v_oldest_record.bio)
        AND (custom_attributes IS NOT DISTINCT FROM v_oldest_record.custom_attributes)
      );

    GET DIAGNOSTICS v_cleaned_count = ROW_COUNT;
    
    IF v_cleaned_count > 0 THEN
      RAISE NOTICE '    ‚úÖ Cleaned % duplicate records for tg_user_id %', v_cleaned_count, v_participant.tg_user_id;
    ELSE
      RAISE NOTICE '    ‚è≠Ô∏è  No identical duplicates found (data was edited or empty)';
    END IF;

  END LOOP;

  RAISE NOTICE '‚úÖ Cleanup completed!';
  
  -- –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  RAISE NOTICE '';
  RAISE NOTICE 'üìä Final statistics:';
  RAISE NOTICE '  Participants with bio: %', 
    (SELECT COUNT(*) FROM participants WHERE bio IS NOT NULL AND bio != '');
  RAISE NOTICE '  Participants with custom_attributes: %', 
    (SELECT COUNT(*) FROM participants WHERE custom_attributes IS NOT NULL AND custom_attributes != '{}'::jsonb);
  RAISE NOTICE '  Participants in multiple orgs: %',
    (SELECT COUNT(*) FROM (
      SELECT tg_user_id 
      FROM participants 
      WHERE tg_user_id IS NOT NULL 
      GROUP BY tg_user_id 
      HAVING COUNT(DISTINCT org_id) > 1
    ) AS multi_org_users);

END $$;

-- –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–∏–≥—Ä–∞—Ü–∏–∏
COMMENT ON TABLE participants IS 'Participants table - bio and custom_attributes are org-specific (fixed in migration 066)';

