import AppShell from '@/components/app-shell'
import { requireOrgAccess } from '@/lib/orgGuard'
import { createClientServer } from '@/lib/server/supabaseServer'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { notFound } from 'next/navigation'
import Link from 'next/link'

type MaterialFolder = {
  id: string;
  name: string;
  parent_id: string | null;
  created_at: string;
};

type MaterialItem = {
  id: string;
  title: string;
  kind: 'doc' | 'file' | 'link';
  content: string | null;
  file_path: string | null;
  url: string | null;
  folder_id: string | null;
  created_at: string;
};

// Server Action –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function createDoc(formData: FormData) {
  'use server'
  
  const org = String(formData.get('org'))
  try {
    const { supabase, user } = await requireOrgAccess(org)
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    await supabase.from('material_items').insert({
      org_id: org, 
      kind: 'doc', 
      title: '–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', 
      content: '–ß–µ—Ä–Ω–æ–≤–∏–∫...', 
      created_by: user.id
    })
    
  } catch (error) {
    console.error('Error creating document:', error)
  }
}

export default async function MaterialsPage({ params }: { params: { org: string } }) {
  try {
    const { supabase } = await requireOrgAccess(params.org)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
    const { data: folders, error: foldersError } = await supabase
      .from('material_folders')
      .select('*')
      .eq('org_id', params.org)
      .order('name') as { data: MaterialFolder[] | null, error: any }
    
    if (foldersError) {
      console.error('Error fetching folders:', foldersError)
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const { data: items, error: itemsError } = await supabase
      .from('material_items')
      .select('*')
      .eq('org_id', params.org)
      .order('created_at', { ascending: false })
      .limit(50) as { data: MaterialItem[] | null, error: any }
    
    if (itemsError) {
      console.error('Error fetching items:', itemsError)
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–∞–ø–∫–∞–º
    const folderMap = new Map<string | null, MaterialItem[]>();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –ø–∞–ø–∫–∏
    folderMap.set(null, []);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
    folders?.forEach(folder => {
      folderMap.set(folder.id, []);
    });
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–∞–ø–∫–∞–º
    items?.forEach(item => {
      const folderId = item.folder_id || null;
      if (folderMap.has(folderId)) {
        folderMap.get(folderId)!.push(item);
      } else {
        // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
        folderMap.get(null)!.push(item);
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    const { data: telegramGroups } = await supabase
      .from('telegram_groups')
      .select('id, title, tg_chat_id')
      .eq('org_id', params.org)
      .order('title')

    return (
      <AppShell orgId={params.org} currentPath={`/app/${params.org}/materials`} telegramGroups={telegramGroups || []}>
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-semibold">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</h1>
          <div className="flex gap-2">
            <Button variant="outline">+ –ù–æ–≤–∞—è –ø–∞–ø–∫–∞</Button>
            <form action={createDoc}>
              <input type="hidden" name="org" value={params.org} />
              <Button type="submit">+ –î–æ–∫—É–º–µ–Ω—Ç</Button>
            </form>
          </div>
        </div>
        
        <Card className="mb-6">
          <CardContent className="pt-6">
            <div className="max-w-md">
              <Input placeholder="üîç –ü–æ–∏—Å–∫ –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö..." />
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-2">
            {/* –≠–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –ø–∞–ø–æ–∫ */}
            {folderMap.get(null)?.length ? (
              <div className="mb-4">
                <div className="px-3 py-2 text-sm font-medium text-neutral-500">
                  –ë–µ–∑ –ø–∞–ø–∫–∏
                </div>
                <div className="ml-4 space-y-1">
                  {folderMap.get(null)?.map(item => (
                    <MaterialItemComponent key={item.id} item={item} orgId={params.org} />
                  ))}
                </div>
              </div>
            ) : null}
            
            {/* –ü–∞–ø–∫–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
            {folders?.map(folder => (
              <div key={folder.id} className="mb-4">
                <div className="flex items-center px-3 py-2 hover:bg-neutral-50 rounded-lg cursor-pointer">
                  <span className="mr-2">üìÇ</span>
                  <span className="font-medium">{folder.name}</span>
                </div>
                
                <div className="ml-8 space-y-1">
                  {folderMap.get(folder.id)?.map(item => (
                    <MaterialItemComponent key={item.id} item={item} orgId={params.org} />
                  ))}
                </div>
              </div>
            ))}
            
            {(!folders?.length && !items?.length) && (
              <div className="text-center py-12">
                <p className="text-neutral-500">–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>
                <p className="text-sm text-neutral-400 mt-1">
                  –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </AppShell>
    )
  } catch (error) {
    console.error('Materials page error:', error)
    return notFound()
  }
}

function MaterialItemComponent({ item, orgId }: { item: MaterialItem; orgId: string }) {
  const icon = item.kind === 'doc' ? 'üìÑ' : 
               item.kind === 'file' ? 'üìé' : 
               'üîó';
  
  return (
    <Link 
      href={`/app/${orgId}/materials/${item.id}`}
      className="flex items-center px-3 py-2 hover:bg-neutral-50 rounded-lg cursor-pointer"
    >
      <span className="mr-2">{icon}</span>
      <div>
        <span>{item.title}</span>
        <div className="text-xs text-neutral-500">
          {new Date(item.created_at).toLocaleDateString()}
        </div>
      </div>
    </Link>
  )
}
