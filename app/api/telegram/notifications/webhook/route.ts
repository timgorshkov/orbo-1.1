import { NextRequest, NextResponse } from 'next/server'
import { createClientServer } from '@/lib/server/supabaseServer'
import { createTelegramService } from '@/lib/services/telegramService'

export const dynamic = 'force-dynamic';

export async function POST(req: NextRequest) {
  console.log('[Notifications Bot Webhook] ==================== WEBHOOK RECEIVED ====================');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
  const secret = process.env.TELEGRAM_NOTIFICATIONS_WEBHOOK_SECRET || process.env.TELEGRAM_WEBHOOK_SECRET
  const receivedSecret = req.headers.get('x-telegram-bot-api-secret-token')
  const usingDedicatedSecret = !!process.env.TELEGRAM_NOTIFICATIONS_WEBHOOK_SECRET
  
  console.log('[Notifications Bot Webhook] Secret token check:', {
    endpoint: '/api/telegram/notifications/webhook',
    botType: 'NOTIFICATIONS',
    usingDedicatedSecret,
    secretSource: usingDedicatedSecret ? 'TELEGRAM_NOTIFICATIONS_WEBHOOK_SECRET' : 'TELEGRAM_WEBHOOK_SECRET (fallback)',
    hasSecret: !!secret,
    receivedMatches: receivedSecret === secret,
    secretLength: secret?.length,
    receivedSecretLength: receivedSecret?.length
  });
  
  if (receivedSecret !== secret) {
    console.error('[Notifications Bot Webhook] ‚ùå Unauthorized - secret token mismatch');
    console.error('[Notifications Bot Webhook] Endpoint: /api/telegram/notifications/webhook (NOTIFICATIONS BOT)');
    console.error('[Notifications Bot Webhook] Using dedicated secret:', usingDedicatedSecret);
    console.error('[Notifications Bot Webhook] Secret source:', usingDedicatedSecret ? 'TELEGRAM_NOTIFICATIONS_WEBHOOK_SECRET' : 'TELEGRAM_WEBHOOK_SECRET');
    console.error('[Notifications Bot Webhook] Expected secret length:', secret?.length);
    console.error('[Notifications Bot Webhook] Received secret length:', receivedSecret?.length);
    console.error('[Notifications Bot Webhook] To fix: Reset webhook using /api/telegram/admin/reset-webhook with botType=notifications');
    return NextResponse.json({ ok: false }, { status: 401 })
  }

  try {
    const body = await req.json()
    const supabase = await createClientServer()
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –±–æ—Ç—É
    if (body?.message && body.message.chat?.type === 'private') {
      const message = body.message
      const userId = message.from.id
      const text = message.text || ''
      const firstName = message.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text.startsWith('/')) {
        const command = text.split(' ')[0].toLowerCase()
        const telegramService = createTelegramService('notifications')
        
        switch (command) {
          case '/start':
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å User ID
            try {
              console.log(`Sending welcome message with User ID to: ${userId}`)
              
              const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

ü§ñ *Orbo Assistant Bot*

–í–∞—à Telegram User ID: \`${userId}\`

üìã *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à User ID –≤—ã—à–µ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ)
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Orbo
3. –û—Ç–∫—Ä–æ–π—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"
4. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à User ID
5. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
6. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–¥–µ—Å—å, –≤ —ç—Ç–æ–º —á–∞—Ç–µ
7. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

üîê –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
‚Ä¢ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –≤–∞—à–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö

_–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help_`
              
              const result = await telegramService.sendMessage(userId, welcomeMessage, {
                parse_mode: 'Markdown'
              })
              
              console.log('Welcome message result:', result)
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const { data: pendingVerifications } = await supabase
                .from('user_telegram_accounts')
                .select('*')
                .eq('telegram_user_id', userId)
                .eq('is_verified', false)
                .not('verification_code', 'is', null)
                .gt('verification_expires_at', new Date().toISOString())
                
              console.log('Found pending verifications:', pendingVerifications?.length || 0)
              
              // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∫–æ–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
              if (pendingVerifications && pendingVerifications.length > 0) {
                for (const verification of pendingVerifications) {
                  console.log(`Resending verification code for account ID: ${verification.id}`)
                  
                  const message = `üîê *–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Orbo*

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤—è–∑–∏ –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥:

\`${verification.verification_code}\`

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Orbo.

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ ${new Date(verification.verification_expires_at).toLocaleString('ru')}
üîí –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`
                  
                  await telegramService.sendMessage(userId, message, {
                    parse_mode: 'Markdown'
                  })
                }
              }
            } catch (error) {
              console.error('Error sending welcome message:', error)
            }
            break
            
          case '/help':
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É —Å User ID
            try {
              const helpMessage = `ü§ñ *Orbo Assistant Bot - –ü–æ–º–æ—â—å*

–í–∞—à Telegram User ID: \`${userId}\`

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /start - –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à User ID –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç:*
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à User ID –≤—ã—à–µ
2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Orbo
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"
4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ
5. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
6. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

*–ü—Ä–æ–±–ª–µ–º—ã?*
‚Ä¢ –ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥? –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
‚Ä¢ –ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 15 –º–∏–Ω—É—Ç, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

üí° –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –≤–∞—à–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö.`
              
              await telegramService.sendMessage(userId, helpMessage, {
                parse_mode: 'Markdown'
              })
            } catch (error) {
              console.error('Error sending help message:', error)
            }
            break
        }
      }
    }
    
    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error('Notifications webhook error:', error)
    return NextResponse.json({ ok: false, error: 'Internal server error' }, { status: 500 })
  }
}
