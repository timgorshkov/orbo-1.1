import { NextResponse } from 'next/server';
import { TelegramService } from '@/lib/services/telegramService';

export const dynamic = 'force-dynamic';

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { telegramUserId, verificationCode, orgId, userId } = body;

    if (!telegramUserId || !verificationCode) {
      return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationsBot = new TelegramService('notifications');

    const message = `üîê *–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Orbo*

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤—è–∑–∏ –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥:

\`${verificationCode}\`

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Orbo.

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç
üîí –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`;

    try {
      const result = await notificationsBot.sendMessage(telegramUserId, message, {
        parse_mode: 'Markdown'
      });

      if (result.ok) {
        return NextResponse.json({ 
          success: true,
          message: 'Verification code sent successfully'
        });
      } else {
        console.error('Failed to send verification code:', result);
        return NextResponse.json({ 
          error: 'Failed to send verification code',
          details: result
        }, { status: 500 });
      }
    } catch (telegramError: any) {
      console.error('Telegram API error:', telegramError);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
      if (telegramError.message?.includes('chat not found') || 
          telegramError.message?.includes('bot was blocked')) {
        return NextResponse.json({ 
          error: 'Please start a conversation with @orbo_assistant_bot first',
          code: 'BOT_BLOCKED'
        }, { status: 400 });
      }

      return NextResponse.json({ 
        error: 'Failed to send verification code via Telegram',
        details: telegramError.message
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('Error in send-verification:', error);
    return NextResponse.json({ error: error.message || 'Internal server error' }, { status: 500 });
  }
}
