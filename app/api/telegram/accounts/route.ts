import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { createClientServer } from '@/lib/server/supabaseServer';

export const dynamic = 'force-dynamic';

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const orgId = searchParams.get('orgId');

    if (!orgId) {
      return NextResponse.json({ error: 'Missing orgId parameter' }, { status: 400 });
    }

    const supabase = await createClientServer();
    const { data: { user }, error: userError } = await supabase.auth.getUser();

    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const { data: telegramAccount, error } = await supabase
      .from('user_telegram_accounts')
      .select('*')
      .eq('user_id', user.id)
      .eq('org_id', orgId)
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
      console.error('Error fetching telegram account:', error);
      return NextResponse.json({ error: 'Failed to fetch telegram account' }, { status: 500 });
    }

    return NextResponse.json({ 
      telegramAccount: telegramAccount || null 
    });

  } catch (error: any) {
    console.error('Error in telegram accounts GET:', error);
    return NextResponse.json({ error: error.message || 'Internal server error' }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const { orgId, telegramUserId, telegramUsername, telegramFirstName, telegramLastName } = body;

    if (!orgId || !telegramUserId) {
      return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 });
    }

    const supabase = await createClientServer();
    const { data: { user }, error: userError } = await supabase.auth.getUser();

    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const verificationCode = Math.random().toString(36).substring(2, 10).toUpperCase();
    const expiresAt = new Date();
    expiresAt.setMinutes(expiresAt.getMinutes() + 15); // –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç
    const { data: telegramAccount, error } = await supabase
      .from('user_telegram_accounts')
      .upsert({
        user_id: user.id,
        org_id: orgId,
        telegram_user_id: telegramUserId,
        telegram_username: telegramUsername,
        telegram_first_name: telegramFirstName,
        telegram_last_name: telegramLastName,
        is_verified: false,
        verification_code: verificationCode,
        verification_expires_at: expiresAt.toISOString(),
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,org_id'
      })
      .select()
      .single();

    if (error) {
      console.error('Error upserting telegram account:', error);
      return NextResponse.json({ error: 'Failed to save telegram account' }, { status: 500 });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await supabase
      .from('telegram_verification_logs')
      .insert({
        user_id: user.id,
        org_id: orgId,
        telegram_user_id: telegramUserId,
        verification_code: verificationCode,
        action: 'request',
        success: true
      });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ä–æ–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Next.js –ø—Ä–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö API
      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
      const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';
      
      if (!supabaseUrl || !supabaseServiceKey) {
        throw new Error('Missing Supabase configuration');
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
      const { TelegramService } = await import('@/lib/services/telegramService');
      const notificationsBot = new TelegramService('notifications');
      
      console.log(`Sending verification code to Telegram user ID: ${telegramUserId}`);
      
      const message = `üîê *–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Orbo*

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤—è–∑–∏ –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥:

\`${verificationCode}\`

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Orbo.

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç
üîí –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`;

      const result = await notificationsBot.sendMessage(telegramUserId, message, {
        parse_mode: 'Markdown'
      });
      
      console.log('Verification code send result:', result);
      
      if (!result.ok) {
        console.error('Failed to send verification code:', result);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
        if (result.description?.includes('chat not found') || 
            result.description?.includes('bot was blocked')) {
          return NextResponse.json({ 
            error: 'Please start a conversation with @orbo_assistant_bot first',
            code: 'BOT_BLOCKED'
          }, { status: 400 });
        }
      }
    } catch (notificationError: any) {
      console.error('Error sending verification code:', notificationError);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —á–∞—Ç–∞
      if (notificationError.message?.includes('chat not found') || 
          notificationError.message?.includes('bot was blocked')) {
        return NextResponse.json({ 
          error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å @orbo_assistant_bot –≤ Telegram',
          code: 'BOT_BLOCKED'
        }, { status: 400 });
      }
    }

    return NextResponse.json({ 
      telegramAccount: {
        ...telegramAccount,
        verification_code: undefined // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç–µ
      },
      message: 'Verification code sent to your Telegram. Please check @orbo_assistant_bot'
    });

  } catch (error: any) {
    console.error('Error in telegram accounts POST:', error);
    return NextResponse.json({ error: error.message || 'Internal server error' }, { status: 500 });
  }
}

export async function PUT(request: Request) {
  try {
    const body = await request.json();
    const { orgId, verificationCode } = body;

    if (!orgId || !verificationCode) {
      return NextResponse.json({ error: 'Missing required parameters' }, { status: 400 });
    }

    const supabase = await createClientServer();
    const { data: { user }, error: userError } = await supabase.auth.getUser();

    if (userError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: telegramAccount, error: findError } = await supabase
      .from('user_telegram_accounts')
      .select('*')
      .eq('user_id', user.id)
      .eq('org_id', orgId)
      .eq('verification_code', verificationCode.toUpperCase())
      .gt('verification_expires_at', new Date().toISOString())
      .single();

    if (findError || !telegramAccount) {
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      await supabase
        .from('telegram_verification_logs')
        .insert({
          user_id: user.id,
          org_id: orgId,
          verification_code: verificationCode,
          action: 'verify',
          success: false,
          error_message: 'Invalid or expired verification code'
        });

      return NextResponse.json({ 
        error: 'Invalid or expired verification code' 
      }, { status: 400 });
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const { data: verifiedAccount, error: updateError } = await supabase
      .from('user_telegram_accounts')
      .update({
        is_verified: true,
        verified_at: new Date().toISOString(),
        verification_code: null,
        verification_expires_at: null
      })
      .eq('id', telegramAccount.id)
      .select()
      .single();

    if (updateError) {
      console.error('Error updating telegram account:', updateError);
      return NextResponse.json({ error: 'Failed to verify account' }, { status: 500 });
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    await supabase
      .from('telegram_verification_logs')
      .insert({
        user_id: user.id,
        org_id: orgId,
        telegram_user_id: telegramAccount.telegram_user_id,
        verification_code: verificationCode,
        action: 'verify',
        success: true
      });

    return NextResponse.json({ 
      telegramAccount: verifiedAccount,
      message: 'Telegram account verified successfully!'
    });

  } catch (error: any) {
    console.error('Error in telegram accounts PUT:', error);
    return NextResponse.json({ error: error.message || 'Internal server error' }, { status: 500 });
  }
}
