import { NextRequest, NextResponse } from 'next/server';
import { createAdminServer } from '@/lib/server/supabaseServer';

export const dynamic = 'force-dynamic';

/**
 * Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: GET /api/debug/check-telegram-user?telegramId=423400966
 */
export async function GET(req: NextRequest) {
  try {
    const searchParams = req.nextUrl.searchParams;
    const telegramIdParam = searchParams.get('telegramId');
    
    if (!telegramIdParam) {
      return NextResponse.json({ 
        error: 'Missing telegramId parameter',
        usage: '/api/debug/check-telegram-user?telegramId=423400966'
      }, { status: 400 });
    }
    
    const telegramId = Number(telegramIdParam);
    
    if (isNaN(telegramId)) {
      return NextResponse.json({ 
        error: 'Invalid telegramId - must be a number' 
      }, { status: 400 });
    }
    
    console.log(`[Debug] Checking Telegram user ${telegramId}`);
    
    const supabase = createAdminServer();
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ user_telegram_accounts
    const { data: telegramAccounts, error: accountsError } = await supabase
      .from('user_telegram_accounts')
      .select('*')
      .eq('telegram_user_id', telegramId);
    
    if (accountsError) {
      return NextResponse.json({ 
        error: 'Database error',
        details: accountsError.message 
      }, { status: 500 });
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    const { data: adminGroups, error: adminGroupsError } = await supabase
      .from('telegram_group_admins')
      .select(`
        tg_chat_id,
        is_admin,
        is_owner,
        verified_at
      `)
      .eq('tg_user_id', telegramId);
    
    // 3. –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const groupsInfo = [];
    if (adminGroups && adminGroups.length > 0) {
      for (const admin of adminGroups) {
        const { data: group } = await supabase
          .from('telegram_groups')
          .select('id, tg_chat_id, title, bot_status')
          .eq('tg_chat_id', admin.tg_chat_id)
          .single();
        
        const { data: orgLink } = await supabase
          .from('org_telegram_groups')
          .select(`
            org_id,
            status,
            organizations (
              name
            )
          `)
          .eq('tg_chat_id', admin.tg_chat_id)
          .single();
        
        groupsInfo.push({
          ...admin,
          group,
          orgLink
        });
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const hasAccount = telegramAccounts && telegramAccounts.length > 0;
    const isVerified = hasAccount && telegramAccounts.some(acc => acc.is_verified);
    const linkedOrgs = hasAccount ? telegramAccounts.map(acc => acc.org_id).filter(Boolean) : [];
    
    return NextResponse.json({
      success: true,
      telegramId,
      diagnosis: {
        hasAccount,
        isVerified,
        accountCount: telegramAccounts?.length || 0,
        linkedOrgsCount: linkedOrgs.length,
        adminInGroupsCount: adminGroups?.length || 0,
        canSeeAvailableGroups: isVerified && adminGroups && adminGroups.length > 0
      },
      details: {
        telegramAccounts,
        linkedOrgs,
        adminGroups: groupsInfo
      },
      recommendation: getRecommendation({
        hasAccount,
        isVerified,
        adminGroups,
        groupsInfo
      })
    });
    
  } catch (error: any) {
    console.error('[Debug] Error checking Telegram user:', error);
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error.message
    }, { status: 500 });
  }
}

function getRecommendation(data: any): string[] {
  const recommendations: string[] = [];
  
  if (!data.hasAccount) {
    recommendations.push('‚ùå Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.');
    recommendations.push('üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram —á–µ—Ä–µ–∑ /app/[org]/telegram/account');
    recommendations.push('üîó –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ @orbo_assistant_bot');
  } else if (!data.isVerified) {
    recommendations.push('‚ö†Ô∏è Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –ù–ï –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.');
    recommendations.push('üìù –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ @orbo_assistant_bot');
  } else if (!data.adminGroups || data.adminGroups.length === 0) {
    recommendations.push('‚ö†Ô∏è Telegram –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ telegram_group_admins.');
    recommendations.push('üîÑ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É /app/[org]/telegram/available-groups –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤.');
  } else {
    const groupsWithoutOrg = data.groupsInfo?.filter((g: any) => !g.orgLink) || [];
    if (groupsWithoutOrg.length > 0) {
      recommendations.push(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${groupsWithoutOrg.length} –≥—Ä—É–ø–ø(—ã), –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`);
      groupsWithoutOrg.forEach((g: any) => {
        recommendations.push(`   - ${g.group?.title || 'Unknown'} (${g.tg_chat_id})`);
      });
      recommendations.push('üìù –≠—Ç–∏ –≥—Ä—É–ø–ø—ã –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ /app/[org]/telegram/available-groups');
    }
    
    const groupsWithOrg = data.groupsInfo?.filter((g: any) => g.orgLink) || [];
    if (groupsWithOrg.length > 0) {
      recommendations.push(`‚úÖ ${groupsWithOrg.length} –≥—Ä—É–ø–ø(—ã) —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º.`);
    }
  }
  
  return recommendations;
}


